
import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Terminal } from 'lucide-react';

const CodeExamples = () => {
  const [copySuccess, setCopySuccess] = useState<string | null>(null);

  const copyToClipboard = (text: string, id: string) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopySuccess(id);
      setTimeout(() => setCopySuccess(null), 2000);
    });
  };

  const examples = [
    {
      id: "install",
      title: "Installation",
      code: "pip install fastwrite",
      language: "bash"
    },
    {
      id: "function",
      title: "Function Documentation",
      code: `from fastwrite import document_function

def calculate_area(length: float, width: float) -> float:
    return length * width

# Generate documentation for the function
documented_function = document_function(
    calculate_area, 
    provider="openai",
    style="google"
)

print(documented_function)

# Output:
# def calculate_area(length: float, width: float) -> float:
#     """Calculate the area of a rectangle.
#
#     Args:
#         length (float): The length of the rectangle.
#         width (float): The width of the rectangle.
#
#     Returns:
#         float: The area of the rectangle calculated by multiplying length and width.
#     """
#     return length * width`,
      language: "python"
    },
    {
      id: "repository",
      title: "Repository Documentation",
      code: `from fastwrite import document_repository

# Generate documentation for all Python files in the repository
document_repository(
    repo_path="./my_project",
    output_path="./docs",
    provider="groq",
    file_types=[".py"],
    recursive=True
)

# This will generate documentation markdown files in the ./docs directory`,
      language: "python"
    },
    {
      id: "bleu",
      title: "BLEU Score Comparison",
      code: `from fastwrite import compare_documentation

# Compare documentation generated by different providers
comparison_results = compare_documentation(
    function=calculate_area,
    providers=["openai", "groq", "gemini"],
    reference_doc="""Calculate the area of a rectangle.
    
    Parameters:
        length (float): The length of the rectangle.
        width (float): The width of the rectangle.
        
    Returns:
        float: The product of length and width, representing the area.
    """
)

print(comparison_results)

# Output: 
# {'openai': 0.85, 'groq': 0.78, 'gemini': 0.82}`,
      language: "python"
    }
  ];

  return (
    <section id="examples" className="py-24 bg-white">
      <div className="mx-auto max-w-7xl px-6 lg:px-8">
        <div className="mx-auto max-w-2xl text-center">
          <h2 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
            See FastWrite in Action
          </h2>
          <p className="mt-6 text-lg leading-8 text-gray-600">
            Explore these code examples to see how FastWrite can be integrated into your workflow.
          </p>
        </div>

        <div className="mx-auto mt-16 max-w-3xl">
          <Tabs defaultValue="function" className="w-full">
            <TabsList className="grid grid-cols-2 md:grid-cols-4 mb-6">
              {examples.map((example) => (
                <TabsTrigger 
                  key={example.id} 
                  value={example.id}
                  className="text-sm"
                >
                  {example.title}
                </TabsTrigger>
              ))}
            </TabsList>
            {examples.map((example) => (
              <TabsContent key={example.id} value={example.id} className="mt-0">
                <div className="relative rounded-lg bg-gray-900 p-4">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center">
                      <Terminal className="h-5 w-5 text-gray-400 mr-2" />
                      <span className="text-sm text-gray-400">{example.title}</span>
                    </div>
                    <button 
                      onClick={() => copyToClipboard(example.code, example.id)}
                      className="text-xs text-gray-400 hover:text-white transition-colors"
                    >
                      {copySuccess === example.id ? "Copied!" : "Copy"}
                    </button>
                  </div>
                  <pre className="overflow-x-auto text-sm">
                    <code className="text-gray-300 font-mono whitespace-pre">
                      {example.code}
                    </code>
                  </pre>
                </div>
              </TabsContent>
            ))}
          </Tabs>
        </div>
      </div>
    </section>
  );
};

export default CodeExamples;
